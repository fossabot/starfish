name: Build and push Docker images
on:
  pull_request:
    types: [opened, edited, synchronize]
    branches:
      - '*'
jobs:
  docker-build-publish:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - dockerfile: db/Dockerfile-prod
            image: 'starfish-db'
            folder: 'db'
          - dockerfile: game/Dockerfile-prod
            image: 'starfish-game'
            folder: 'game'
          - dockerfile: discord/Dockerfile-prod
            image: 'starfish-discord'
            folder: 'discord'
          - dockerfile: frontend/Dockerfile-prod
            image: 'starfish-frontend'
            folder: 'frontend'
          - dockerfile: nginx/Dockerfile-prod
            image: 'starfish-nginx'
            folder: 'nginx'

    steps:
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            src:
              - '${{matrix.folder}}/**'
              - common/**

      - name: Check Out Repo
        if: steps.changes.outputs.src == 'true'
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        if: steps.changes.outputs.src == 'true'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        if: steps.changes.outputs.src == 'true'
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        if: steps.changes.outputs.src == 'true'
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.folder }}-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-${{ matrix.folder }}-

      - uses: docker/build-push-action@v2
        if: steps.changes.outputs.src == 'true'
        id: docker_build
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: starfishgame/${{ matrix.image }}:pull-request-${{ github.event.number }}, starfishgame/${{ matrix.image }}:staging-latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      - name: Move cache
        if: steps.dockerbuild.outcome == 'success' && steps.changes.outputs.src == 'true'
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  run-docker-compose:
    needs: [docker-build-publish]
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Populate secrets files
        run: |
          mkdir frontend/secrets
          mkdir game/secrets
          echo "${{ secrets.DISCORD_BOT_ID }}" > discord/secrets/bot_id.txt
          echo "${{ secrets.DISCORD_TEST_TOKEN }}" > discord/secrets/discord_token.txt
          echo "${{ secrets.GOOGLE_CLIENT_EMAIL }}" > frontend/secrets/google_client_email.txt
          echo "${{ secrets.GOOGLE_PRIVATE_KEY }}" > frontend/secrets/google_private_key.txt
          echo "${{ secrets.TEST_ADMIN_KEYS }}" > game/secrets/admin_keys.txt
          echo "PULL_REQUEST_NUMBER=${{ github.event.number }}" >> .env

      - name: Launch containers
        run: docker-compose -f docker-compose-staging.yml --env-file .env up -d

      - name: Show running containers
        run: docker ps

      - name: Show open ports
        run: netstat -tulpn | grep LISTEN

      - name: Check the deployed service URL
        uses: jtalk/url-health-check-action@v2
        with:
          # Check the following URLs one by one sequentially
          url: http://localhost:4300
          # Follow redirects, or just report success on 3xx status codes
          follow-redirect: true # Optional, defaults to "false"
          # Fail this action after this many failed attempts
          max-attempts: 3 # Optional, defaults to 1
          # Delay between retries
          retry-delay: 5s # Optional, only applicable to max-attempts > 1
          # Retry all errors, including 404. This option might trigger curl upgrade.
          retry-all: false # Optional, defaults to "false"

      # - name: Verify frontend server is running
      #   uses: wei/curl@master
      #   id: curl2
      #   with:
      #     args: https://localhost:443
      #     fail-on-error: false

      # - name: Verify frontend server is running
      #   uses: wei/curl@master
      #   id: curl3
      #   with:
      #     args: http://localhost:4200
      #     fail-on-error: false

      # - name: Verify frontend server is running
      #   uses: wei/curl@master
      #   id: curl4
      #   with:
      #     args: http://localhost:4300
      #     fail-on-error: false
      # run: |
      #   curl --silent http://localhost:80 --output ./webserver_response1.log &
      #   curl --silent https://localhost:443 --output ./webserver_response2.log &
      #   curl --silent http://localhost:4200 --output ./webserver_response3.log &
      #   curl --silent http://localhost:4300 --output ./webserver_response4.log &
      #   sleep 5
      #   exit 0

      # - run: echo '${{ steps.curl2 }}'

      # - run: echo '${{ steps.curl3 }}'

      # - run: echo '${{ steps.curl4 }}'

      # if grep -q "200" ./webserver_response.log; then
      #   echo "Successfully deployed to CI"
      # else
      #   echo "Failed to deploy to CI"
      #   exit 1
      # fi

  npm-test:
    # needs: [run-docker-compose]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - folder: 'game'

    steps:
      - name: Check Out Repo
        uses: actions/checkout@v2

      - name: Start MongoDB
        run: |
          docker build -t mongo-test -f db/Dockerfile-staging .
          docker run -d -p 0.0.0.0:27017:27017 mongo-test

      - name: Use Node.js
        uses: actions/setup-node@v2.5.1
        with:
          node-version: '16'

      - uses: bahmutov/npm-install@v1
        with:
          working-directory: ${{matrix.folder}}

      - uses: bahmutov/npm-install@v1
        with:
          working-directory: 'common'

      - name: Run test suite on ${{matrix.folder}}
        run: npm run teststaging
        working-directory: ${{matrix.folder}}

      - uses: actions/upload-artifact@v2 # upload test results
        if: success() || failure() # run this step even if previous step failed
        with:
          name: test-results
          path: ${{matrix.folder}}/reports/test-results.json

      - name: Download test result artifact
        uses: actions/download-artifact@v2
        if: success() || failure()
        with:
          name: test-results

      - uses: dorny/test-reporter@v1
        if: (success() || failure())
        continue-on-error: true
        with:
          name: test-results
          fail-on-error: false
          path: ${{matrix.folder}}/reports/test-results.json
          reporter: mocha-json

  # TODO: Add cypress tests

  # artillery:
  #   needs: [run-docker-compose]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Clone Stonefish repo
  #       uses: actions/checkout@v2
  #       with:
  #         repository: 'starfishgame/stonefish'

  #     - name: NPM install
  #       run: |
  #         npm install

  #     - name: Run Artillery test
  #       run: |
  #         npm run test
